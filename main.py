##VULNERABILITY SCANNER
#add shebang

#imports
from prettytable import PrettyTable
from portScan import isPortOpenNmap
from serviceIdentifier import identifyServices
from versionFetcher import getVersionInfo
from vulnerablitityFetcher import fetchVulerabilityInfo


# Learn to identify and exploit vulnerabilities in software.
# Use libraries like pymetasploit and burp.

# Define the target URL or IP address for scanning.
# Optionally, allow user input for target selection.

targetURL = '192.168.1.5'
# targetURL = '127.0.0.1'

# print("Please Enter a target URL or IP")
# targetURL = input()

# Use nmap or scapy to scan the target for open ports.
# Identify the services running on each open port.
#isPortOpen from portScan.py

#function to identify the services
#Identify services from serviceIdentifier.py

table= PrettyTable()
table.field_names = ["Port", "Status", "Service", "Product", "Version"]

for port in range(79, 82): #1. 1025
  if isPortOpenNmap(targetURL, port):
    [service, product, version, cpe] = identifyServices(targetURL, port)
    # service = ''
    table.add_row([port, "Open", service, product, version])
    print('For the service: "' + service + '" Common Vulnerabilities are:')
    fetchVulerabilityInfo(cpe)

print(table)
  

# Send probes to the identified services to determine their versions.
# Use libraries like httplib or socket for custom probes.
#getVersionInfo from versionFetcher.py

#OPTIONAL : CRAWL THE WEB TO GET RELEVANT INFORMATION ABOUT THE SERVICES
#def getServiceArticle(serviceName)

# Query vulnerability databases like CVE or NVD using APIs.
# Search for vulnerabilities associated with the identified service and version.

# Match the identified vulnerabilities with the scanned service and version.
# Analyze the severity and impact of each matched vulnerability.

# Generate a report summarizing the scan results and vulnerabilities.
# Include details like service information, vulnerability descriptions, and mitigation suggestions.
