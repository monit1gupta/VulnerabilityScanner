##VULNERABILITY SCANNER
#add shebang

#imports
import socket
import nmap
import prettytable as PrettyTable
import httplib2 as httplib
from portScan import isPortOpen
from serviceIdentifier import identifyServices
from versionFetcher import getVersionInfo

# Learn to identify and exploit vulnerabilities in software.
# Use libraries like pymetasploit and burp.

# Define the target URL or IP address for scanning.
# Optionally, allow user input for target selection.

targetURL = ''

print("Please Enter a target URL or IP")
targetURL = input()

# Use nmap or scapy to scan the target for open ports.
# Identify the services running on each open port.
#isPortOpen from portScan.py

#function to identify the services
#Identify services from serviceIdentifier.py

table = PrettyTable(["Port", "Status", "Service"])

for port in range(1, 100): #1. 1025
  if isPortOpen(targetURL, port):
    service = identifyServices(targetURL, port)
    table.add_row([port, "Open", service])
    print(port + " is open!")
  else:
    table.add_row([port, "Closed", "N/A"])

print(table)


# Send probes to the identified services to determine their versions.
# Use libraries like httplib or socket for custom probes.
#getVersionInfo from versionFetcher.py

#OPTIONAL : CRAWL THE WEB TO GET RELEVANT INFORMATION ABOUT THE SERVICES
#def getServiceArticle(serviceName)

# Query vulnerability databases like CVE or NVD using APIs.
# Search for vulnerabilities associated with the identified service and version.

# Match the identified vulnerabilities with the scanned service and version.
# Analyze the severity and impact of each matched vulnerability.

# Generate a report summarizing the scan results and vulnerabilities.
# Include details like service information, vulnerability descriptions, and mitigation suggestions.
